<templateSet group="FlowMVI">
  <template name="fmvic" value="import pro.respawn.flowmvi.api.Container&#10;import pro.respawn.flowmvi.api.PipelineContext&#10;import pro.respawn.flowmvi.dsl.store&#10;import pro.respawn.flowmvi.dsl.updateState&#10;import pro.respawn.flowmvi.dsl.withState&#10;import pro.respawn.flowmvi.plugins.recover&#10;import pro.respawn.flowmvi.plugins.reduce&#10;&#10;private typealias Ctx = PipelineContext&lt;$NAME$State, $NAME$Intent, $NAME$Action&gt;&#10;&#10;internal class $NAME$Container(&#10;    $PARAMS$&#10;) : Container&lt;$NAME$State, $NAME$Intent, $NAME$Action&gt; {&#10;&#10;    override val store = store(initial = $NAME$State.Loading) {&#10;        configure {&#10;            name = &quot;$NAME$&quot;&#10;        }&#10;        recover {&#10;            updateState { $NAME$State.Error(it) }&#10;            null&#10;        }&#10;        reduce { intent -&gt;&#10;            when(intent) {&#10;                $END$&#10;                else -&gt; TODO()&#10;            }&#10;        }&#10;    }&#10;}" shortcut="ENTER" description="FlowMVI Container" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue=" " alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fmvis" value="@Composable&#10;fun $NAME$Screen(&#10;    container: $NAME$Container,&#10;) = with(container.store) {&#10;&#10;    val state by subscribe { action -&gt;&#10;        when(action) {&#10;            else -&gt; TODO()&#10;        }&#10;    }&#10;&#10;    $NAME$ScreenContent(state)&#10;}&#10;&#10;@Composable&#10;private fun IntentReceiver&lt;$NAME$Intent&gt;.$NAME$ScreenContent(&#10;    state: $NAME$State,&#10;) {&#10;    when(state) {&#10;        $END$&#10;        else -&gt; TODO()&#10;    }&#10;}&#10;&#10;@Composable&#10;@Preview&#10;private fun $NAME$ScreenPreview() = EmptyReceiver { &#10;    $NAME$ScreenContent(TODO()) &#10;}&#10;" shortcut="ENTER" description="FlowMVI Composable Screen" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fmvip" value="/**&#10; * TODO: Add documentation&#10; **/&#10;@FlowMVIDSL&#10;fun &lt;S: MVIState, I: MVIIntent, A: MVIAction&gt; $NAME$Plugin(&#10;    name: String? = &quot;$PluginName$Plugin&quot;,&#10;) = plugin&lt;S, I, A&gt; {&#10;    this.name = name&#10;    &#10;    $END$&#10;}&#10;&#10;/**&#10; * Install a new [$NAME$Plugin].&#10;**/&#10;@FlowMVIDSL&#10;fun &lt;S: MVIState, I: MVIIntent, A: MVIAction&gt; StoreBuilder&lt;S, I, A&gt;.$NAME$(&#10;    name: String? = &quot;$PluginName$Plugin&quot;,&#10;) = install($NAME$Plugin(name))" shortcut="ENTER" description="FlowMVI Plugin" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="true" />
    <variable name="PluginName" expression="capitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fmvilp" value="/**&#10; * TODO: Add documentation&#10; **/&#10;@FlowMVIDSL&#10;fun &lt;S: MVIState, I: MVIIntent, A: MVIAction&gt; $NAME$Plugin(&#10;    name: String? = &quot;$PluginName$Plugin&quot;,&#10;) = lazyPlugin&lt;S, I, A&gt; {&#10;    this.name = name&#10;    &#10;    $END$&#10;}&#10;&#10;/**&#10; * Install a new [$NAME$Plugin]. &#10;**/&#10;@FlowMVIDSL&#10;fun &lt;S: MVIState, I: MVIIntent, A: MVIAction&gt; StoreBuilder&lt;S, I, A&gt;.$NAME$(&#10;    name: String? = &quot;$PluginName$Plugin&quot;,&#10;) = install($NAME$Plugin(name))" shortcut="ENTER" description="FlowMVI Lazy Plugin" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="true" />
    <variable name="PluginName" expression="capitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fmvim" value="internal sealed interface $NAME$State : MVIState {&#10;    data object Loading : $NAME$State&#10;    data class Error(val e: Exception?) : $NAME$State&#10;    $END$&#10;}&#10;&#10;internal sealed interface $NAME$Intent : MVIIntent {&#10;&#10;}&#10;&#10;internal sealed interface $NAME$Action : MVIAction {&#10;&#10;}" shortcut="ENTER" description="FlowMVI Model definition" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_OBJECT_DECLARATION" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="fmvid" value="/**&#10; * TODO: Document the decorator&#10; */&#10;@FlowMVIDSL&#10;fun &lt;S : MVIState, I : MVIIntent, A : MVIAction&gt; $NAME$Decorator(&#10;    name: String? = &quot;$DecoratorName$Decorator&quot;,&#10;) = decorator&lt;S, I, A&gt; {&#10;    this.name = name&#10;    $END$&#10;}&#10;&#10;/**&#10; * Installs a new [$NAME$Decorator].&#10; */&#10;@FlowMVIDSL&#10;fun &lt;S : MVIState, I : MVIIntent, A : MVIAction&gt; StoreBuilder&lt;S, I, A&gt;.$NAME$(&#10;    name: String? = &quot;$DecoratorName$Decorator&quot;,&#10;) = install($NAME$Decorator(name))&#10;" shortcut="ENTER" description="FlowMVI Decorator" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="kotlinFunctionName()" defaultValue="" alwaysStopAt="true" />
    <variable name="DecoratorName" expression="capitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>