package pro.respawn.flowmvi.debugger.server.ui

import java.util.Stack

// TODO: We'll need a more robust printing algorithm, experiment with real use-cases first
//     this was generated by chat gpt

fun Any.prettyPrintToString(): String = buildString {
    val initial = this@prettyPrintToString.toString()
    // Use a stack to keep track of the indentation level
    val stack = Stack<Int>()
    // Use a flag to indicate if the previous character was a comma
    var comma = false
    // Loop through each character of the original string
    initial.forEach { c ->
        when (c) {
            // If the character is an opening bracket, increase the indentation level and start a new line
            '(', '[', '{' -> {
                stack.push(length)
                append(c).append("\n")
                comma = false
            }
            // If the character is a closing bracket, decrease the indentation level and start a new line
            ')', ']', '}' -> {
                if (stack.isNotEmpty()) {
                    stack.pop()
                }
                append("\n").append(c)
                comma = false
            }
            // If the character is a comma, append a space and start a new line
            ',' -> {
                append(c).append(" ")
                comma = true
            }
            // If the character is not a whitespace, append it to the string
            else -> {
                if (!c.isWhitespace()) {
                    // If the previous character was a comma, indent the string according to the stack
                    if (comma) {
                        append("\n")
                        if (stack.isNotEmpty()) {
                            val indent = stack.peek()
                            repeat(indent) {
                                append(" ")
                            }
                        }
                    }
                    append(c)
                    comma = false
                }
            }
        }
    }
}
